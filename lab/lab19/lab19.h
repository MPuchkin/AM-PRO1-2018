//
// Лабораторная работа №19. Списки. Обработка списков.
// lab19.h
//
#pragma once

typedef unsigned int uint;

// Узел списка:
//     tlist::datatype - тип данных списка;
//     data - значение в узле списка;
//     next - указатель на следующий элемент.
struct tlist
{
    typedef int datatype;
    datatype data;
    tlist *next;
};

// Функция создания списка.
// Данные вводятся из файла.
// Входные параметры:
//     filename - имя файла данных.
// Возвращает указатель на первый элемент списка.
// В случае, если не удаётся получить доступ к файлу
// выбрасывает исключение char*.
tlist *read_list(const char *filename);

// Функция удаления списка.
// Входные параметры:
//     begin - указатель на начало списка.
// Выходное значение параметра begin равно nullptr.
void delete_list(tlist *&begin);

// Функция вывода списка на консоль.
// Входные параметры:
//     begin - указатель на начало списка.
void print(const tlist *begin);

// Вставить новое значение в начало спискаю
// Входные параметры:
//     begin - указатель на начало списка;
//     x - новое значение.
// Возвращает указатель на новый элемент.
tlist *insert_middle(const tlist *begin, tlist::datatype x);

// Удалить K элементов после элемента со значением X.
// Входные параметры:
//     begin - указатель на начало списка;
//     x - искомое значение;
//     k – количество значений для удаления.
void remove_k_after_x(const tlist *begin, tlist::datatype x, uint k);

// Вставить значение X перед каждым элементом со значением Y.
// Входные параметры:
//     begin - указатель на начало списка;
//     x - новое значение;
//     y - искомое значение.
void insert_x_before_y(tlist *&begin, tlist::datatype x, tlist::datatype y);

// Заполнить список значениями из файла, отсортировав их по убыванию
// Входные параметры:
//     filename – имя файла данных.
//  Возвращает указатель на начало списка.
tlist *read_sorted(const char *filename);