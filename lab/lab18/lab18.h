//
// Лабораторная работа №18. Динамические структуры данных. Списки
// lab18.h
//
#pragma once

typedef unsigned int uint;

// Узел списка:
//     tlist::datatype - тип данных списка;
//     data - значение в узле списка;
//     next - указатель на следующий элемент.
struct tlist
{
    typedef int datatype;
    datatype data;
    tlist *next;
};

// Функция создания списка.
// Данные вводятся с конслои.
// Входные параметры:
//     length - количество элементов списка.
// Возвращает указатель на первый элемент списка.
tlist *read_list(const uint length);

// Функция удаления списка.
// Входные параметры:
//     begin - указатель на начало списка.
// Выходное значение параметра begin равно nullptr.
void delete_list(tlist *&begin);

// Функция вывода списка на консоль.
// Входные параметры:
//     begin - указатель на начало списка.
void print_list(const tlist *begin);

// Функция поиска элемента.
// Входные параметры:
//     begin - указатель на начало списка;
//     x - искомое значение.
// Возвращает указатель на первый элемент с заданным значением или
// nullptr, если элемента с таким значение в списке нет.
tlist *find(const tlist *begin, tlist::datatype x);

// Количество элементов списка.
// Входные параметры:
//     begin - указатель на начало списка/
// Возвращает количество элементов списка
uint length(const tlist *begin);

// Вставка элемента в начало списка.
// Входные параметры:
//     begin - указатель на начало списка;
//     x - новое значение.
// Возвращает указатель на новое начало списка.
tlist *add_first(const tlist *begin, tlist::datatype x);

// Вставка элемента в конец списка.
// Входные параметры:
//     begin - указатель на начало списка;
//     x - новое значение.
// Возвращает указатель на новый элемент списка.
tlist *add_last(tlist *&begin, tlist::datatype x);

// Вставка нового значения перед указанным элементом списка.
// Входные параметры:
//     begin - указатель на начало списка;
//     item - указатель на элемент для вставки;
//     x - новое значение.
// Возвращает указатель на новый элемент списка.
tlist *insert_before(tlist *&begin, tlist *item, tlist::datatype x);

// Удаление элемента после указанного элемента списка.
// Входные параметры:
//     begin - указатель на начало списка;
//     item - указатель на элемент для удаления.
void remove_after(tlist *&begin, tlist *item);