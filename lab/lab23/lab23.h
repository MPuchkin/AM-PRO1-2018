//
// Лабораторная рвбота №2. Деревья
// tree.h
//
#pragma once

typedef unsigned int uint;

// Описание узла дерева:
//     tree::datatype - тип данных дерева;
//     data - значение в узле дерева;
//     left - укзатель на левое поддерево;
//     right - указатель на правое поддерево.
struct tree
{
    typedef int datatype;
    datatype data;
    tree *left;
    tree *right;
};

// Функция создания дерева.
// Данные вводятся с конслои.
// Входные параметры:
//     count - количество элементов дерева.
// Возвращает указатель на корневой элемент дерева.
tree *read_tree(const uint count);

// Функция вставки значения в неупорядоченное дерево.
// Входные параметры:
//     root - указатель на корень дерева;
//     x - вставляемое значение.
void insert(tree *&root, tree::datatype x);

// Функция удаления дерева.
// Входные параметры:
//     root - указатель на корневой элемент дерева.
// root == nullptr после выполнения этой функции.
void delete_tree(tree *&root);

// Функция вывода дерева на консоль.
// Входные параметры:
//     root - указатель на корневой элемент дерева.
void print_tree(const tree *root, uint space = 0);

// Функция вычисления количества листьев в дереве.
// Входные параметры:
//     root - указатель на корневой элемент дерева.
uint leaves_count(const tree *root);

// Определить глубину дерева.
// Входные параметры:
//     root - указатель на корневой элемент дерева.
uint depth(const tree *root);

// Определить количество узлов на заданной глубине.
// Входные параметры:
//     root - указатель на корневой элемент дерева.
uint width_at_depth(const tree *root, uint level);

// Определить ширину дерева.
// Входные параметры:
//     root - указатель на корневой элемент дерева.
uint width(const tree *root);

// Создать копию дерева.
// Входные параметры:
//     root - указатель на корневой элемент дерева.
tree *copy_tree(const tree *root);

// Удалить все листья с заданным значением из дерева.
// Входные параметры:
//     root - указатель на корневой элемент дерева.
void remove_leaves(tree *&root, tree::datatype x);