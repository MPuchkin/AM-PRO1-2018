//
// Лабораторная №11. Динамические массивы. Обработка ошибок.
// lab11.h
//
#pragma once

typedef unsigned int uint;
const double precision = 1E-15;

// Ввод массива с клавиатуры
// Выделяет динамическую память!
// Параметры:
//     a – указатель на массив, который будет создан,
//     n – размер введенного массива.
void read_new(int *&a, uint &n);

// Ввод двумерного массива c клавиатуры
// Параметры:
//     m - указатель на начало массива,
//     rows - количество строк массива m,
//     cols - количество столбцов массива m.
void read_new(double** &m, uint &rows, uint &cols);

// Освобождение памяти занимаемой двумерным массивом
// Параметры:
//     m - указатель на начало массива,
//     rows - количество строк массива m,
//     cols - количество столбцов массива m.
void delete_matrix(double** &m, const uint rows, const uint cols = 0);

// Вывод массива на консоль
// Параметры:
//     a – массив,
//     n – размер массива.
void print(const int *a, uint n);

// Вывод матрицы на консоль
// Параметры:
//     m – указатель на начало массива,
//     rows - количество строк для вывода,
//     cols - количество элементов в строке.
void print(double const* const* m, const uint rows, const uint cols);

// Функция поиска первого и последнего вхождения ноля в массиве.
// Входные параметры:
//      a - указатель на начало массива
//      n - количество элементов в массиве
// Выходные параметры:
//      first - пеервое вхождение
//      last - последнее
// Если в массиве один ноль, first==last.
// Если в массиве нет нолей, функция генерирует исключение char*.
void find_zeros(const int* a, const uint n, uint &first, uint &last);

// Функция дублироания элементов массива,
// находящихся между первым и последним нолем.
//      a - указатель на начало массива
//      n - количество элементов в массиве
// Если в массиве не нолей, либо нет элементов для дублирования,
// то функция генерирует исключение char*.
void duplicate_between_zeros(int *&a, uint &n);

